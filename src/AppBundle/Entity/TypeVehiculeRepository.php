<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * TypeVehiculeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TypeVehiculeRepository extends EntityRepository
{
    
    public function findAllAjax($start, $end, $sCol, $sdir, $search) {
        $qb = $this->getEntityManager()
            ->createQuery(
                'SELECT r.id, r.montantRevisite, r.montantVisite, r.delai, r.libelle, g.libelle as genre, u.libelle as usage, c.libelle as carrosserie FROM AppBundle:TypeVehicule r LEFT JOIN r.genre g LEFT JOIN r.usage u LEFT JOIN r.carrosserie c '
                    . ' WHERE r.libelle like :search or g.libelle like :search or u.libelle like :search OR c.libelle like :search '
                    . ' ORDER BY '.$sCol.' '.$sdir)
            ->setParameter('search', '%'.$search.'%')
            ->setFirstResult($start)
            ->setMaxResults($end);
        $arrayAss = $qb->execute(null, \Doctrine\ORM\Query::HYDRATE_SCALAR);
        return $arrayAss;
    }
    
     public function countRows() {
        $qb = $this->createQueryBuilder('c');
        $qb->select('count(c.id)');
        return  $qb->getQuery()->getSingleScalarResult();
     }
    
     public function trouverParLibelle($libelle) {
       try{ 
         $result = $this->getEntityManager()
            ->createQuery(
                'SELECT r FROM AppBundle:TypeVehicule r WHERE r.libelle = :libelle'
            )->setParameter("libelle",$libelle)
            ->getSingleResult();
       }catch (\Doctrine\ORM\NonUniqueResultException $ex) {
            $result = null;
        }
        catch (\Doctrine\ORM\NoResultException $ex){
            $result = null;
        }
        
        return $result; 
    }    
    
    public function findUsageAjax($search, $maxRows, $genre) {
        if(strlen($genre) == 0) {
            $result[] = ["id" => 0, "libelle" => "Choisir D'abord PTAC", "code" => ""];
        }else{
            $result = $this->getEntityManager()
                ->createQuery(
                    'SELECT u.id, u.libelle, u.code FROM AppBundle:TypeVehicule r LEFT JOIN r.usage u LEFT JOIN r.genre g WHERE g.code = :genre AND (u.libelle LIKE :libelle OR u.code like :libelle) order by u.libelle'
                )->setParameter("libelle","%".$search."%")
                ->setParameter("genre",$genre)
                ->setMaxResults($maxRows)
                ->getResult();
        }
        if(count($result) == 0) {
            $result[] = ["id" => 0, "libelle" => "Aucun rÃ©sultat", "code" => ""];
        }
        return $result; 
    }
    
    public function findCarrosserieAjax($search, $maxRows, $genre, $usage) {
        if(strlen($genre) == 0) {
            $result[] = ["id" => 0, "libelle" => "Choisir D'abord PTAC", "code" => ""];
        }else{
            $result = $this->getEntityManager()
                ->createQuery(
                    'SELECT c.id, c.libelle, c.code FROM AppBundle:TypeVehicule r LEFT JOIN r.usage u LEFT JOIN r.genre g LEFT JOIN r.carrosserie c WHERE g.code = :genre AND u.id = :usage AND (c.libelle LIKE :libelle OR c.code like :libelle) order by c.libelle'
                )->setParameter("libelle","%".$search."%")
                ->setParameter("genre",$genre)
                ->setParameter("usage",$usage)
                ->setMaxResults($maxRows)
                ->getResult();
        }
        if(count($result) == 0) {
            $result[] = ["id" => 0, "libelle" => "Aucun rÃ©sultat", "code" => ""];
        }
        return $result; 
    }
}

<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * StatistiqueRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BienRepository extends EntityRepository
{
    
    public function findAllAjax($start, $end, $sCol, $sdir, $search) {
        
        $qb = $this->getEntityManager()
            ->createQuery(
                'SELECT r.id, r.libelle, r.statut, r.typeAffaire, t.libelle as tlibelle, t.code as tcode, r.dateCreation FROM AppBundle:Bien r LEFT JOIN r.typeBien t '
                    . ' WHERE t.code != :appartement AND (r.libelle LIKE :search OR r.statut LIKE :search OR r.id like :search OR  t.libelle LIKE :search) '
                    . ' ORDER BY '.$sCol.' '.$sdir)
            ->setParameter('search', '%'.$search.'%')
            ->setParameter('appartement', 'APPARTEMENT')
            ->setFirstResult($start)
            ->setMaxResults($end);
        $arrayAss = $qb->execute(null, \Doctrine\ORM\Query::HYDRATE_SCALAR);
        return $arrayAss;
       
    }
    
     public function countRows() {
        $qb = $this->createQueryBuilder('c');
        $qb->select('count(c.id)')->leftJoin('c.typeBien', 't')->where('t.code != :code')->setParameter('code', 'APPARTEMENT');
        return  $qb->getQuery()->getSingleScalarResult();
     }
     
     public function countApparts($id) {
        $qb = $this->getEntityManager()
            ->createQuery(
                'SELECT r.id FROM AppBundle:Bien r LEFT JOIN r.parent t '
                    . ' WHERE t.id = :search ')
            ->setParameter('search', $id);
        $arrayAss = $qb->execute(null, \Doctrine\ORM\Query::HYDRATE_SCALAR);
        return count($arrayAss);
     }
    
     public function findParentAjax($search, $maxRows) {
        
        $maxRows = (intval($maxRows) > 0) ? intval($maxRows) : 10; 
        $qb = $this->createQueryBuilder('c');
	$qb ->select('c.libelle, p.nom, p.prenom, p.telephone, p.email,c.id ') 
            ->leftJoin('c.proprietaire', 'p')
                ->leftJoin('c.typeBien', 't')
            ->where('t.libelle = :appartement AND (c.libelle LIKE :search OR p.nom LIKE :search OR p.prenom LIKE :search OR p.telephone LIKE :search OR  CONCAT(p.prenom, :vide, p.nom) LIKE :search OR CONCAT(p.nom, :vide, p.prenom) LIKE :search)')
            ->setParameter('search', '%'.$search.'%')
            ->setParameter('vide', ' ')
            ->setParameter('appartement', 'Immeuble')
            ->setMaxResults($maxRows)
            ->getQuery()->execute();
        $arrayAss = $qb->getQuery()
	->execute(null, \Doctrine\ORM\Query::HYDRATE_SCALAR);
        if(count($arrayAss) == 0)
          return(array(0=>array("libelle"=>"Pas de résultat","nom"=>"","prenom"=>"","telephone"=>"" ,"id"=>-1 )));
        return $arrayAss;
    }
    
    public function findDispoAjax($search, $maxRows) {
        
        $maxRows = (intval($maxRows) > 0) ? intval($maxRows) : 10; 
        $qb = $this->createQueryBuilder('c');
	$qb ->select('c.libelle, p.nom, p.prenom, p.telephone, p.email, c.loyer, c.loyerJournalier, c.montant, c.id ') 
            ->leftJoin('c.proprietaire', 'p')
            ->where('c.statut = :statut AND (c.libelle LIKE :search OR p.nom LIKE :search OR p.prenom LIKE :search OR p.telephone LIKE :search OR  CONCAT(p.prenom, :vide, p.nom) LIKE :search OR CONCAT(p.nom, :vide, p.prenom) LIKE :search)')
            ->setParameter('search', '%'.$search.'%')
            ->setParameter('vide', ' ')
            ->setParameter('statut', 'DISPONIBLE')
            ->setMaxResults($maxRows)
            ->getQuery()->execute();
        $arrayAss = $qb->getQuery()
	->execute(null, \Doctrine\ORM\Query::HYDRATE_SCALAR);
        if(count($arrayAss) == 0)
          return(array(0=>array("libelle"=>"Pas de résultat","nom"=>"","prenom"=>"","telephone"=>"","id"=>-1 )));
        return $arrayAss;
    }
    
    public function findByCode($code) {
       try{ 
         $result = $this->getEntityManager()
            ->createQuery(
                'SELECT r FROM AppBundle:TypeBien r WHERE r.code = :code'
            )->setParameter("code",$code)
            ->getSingleResult();
       }catch (\Doctrine\ORM\NonUniqueResultException $ex) {
            $result = null;
        }
        catch (\Doctrine\ORM\NoResultException $ex){
            $result = null;
        }
        
        return $result; 
    }
    
}

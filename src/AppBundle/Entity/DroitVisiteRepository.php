<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ModeleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DroitVisiteRepository extends EntityRepository
{
    
    public function findAllAjax($start, $end, $sCol, $sdir, $search) {
        $qb = $this->getEntityManager()
            ->createQuery(
                'SELECT r.id, r.ptacMin, r.ptacMax, r.montant, r.timbre, r.anasser, c.libelle as carrosserie, u.libelle as usage, g.libelle as genre FROM AppBundle:DroitVisite r LEFT JOIN r.carrosserie c LEFT JOIN r.usage u LEFT JOIN r.genre g '
                    . ' WHERE r.montant like :search or c.libelle like :search or u.libelle like :search or g.libelle like :search'
                    . ' ORDER BY '.$sCol.' '.$sdir)
            ->setParameter('search', '%'.$search.'%')
            ->setFirstResult($start)
            ->setMaxResults($end);
        $arrayAss = $qb->execute(null, \Doctrine\ORM\Query::HYDRATE_SCALAR);
        return $arrayAss;
    }
    
     public function countRows() {
        $qb = $this->createQueryBuilder('c');
        $qb->select('count(c.id)');
        return  $qb->getQuery()->getSingleScalarResult();
     }
     
     public function countRowsFiltre($search) {
        $qb = $this->createQueryBuilder('r');
        $qb->select('count(r.id)')->leftJoin('r.carrosserie', 'c')->leftJoin('r.usage', 'u')->leftJoin('r.genre', 'g')->where('r.montant like :search or c.libelle like :search or u.libelle like :search or g.libelle like :search')->setParameter('search', '%'.$search.'%');
        return  $qb->getQuery()->getSingleScalarResult();
    }
    
     public function trouverParLibelle($libelle) {
       try{ 
         $result = $this->getEntityManager()
            ->createQuery(
                'SELECT r FROM AppBundle:Modele r WHERE r.libelle = :libelle'
            )->setParameter("libelle",$libelle)
            ->getSingleResult();
       }catch (\Doctrine\ORM\NonUniqueResultException $ex) {
            $result = null;
        }
        catch (\Doctrine\ORM\NoResultException $ex){
            $result = null;
        }
        
        return $result; 
    }    
}

<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * CertificatRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CertificatRepository extends EntityRepository
{    
    public function findAllLotAjax($start, $end, $sCol, $sdir, $search, $lotid) {
        $qb = $this->getEntityManager()
            ->createQuery(
                'SELECT r.id, r.serie, r.attribuePar, c.nom, c.prenom, r.dateAttribution, r.annule, r.utilise, r.immatriculation FROM AppBundle:Certificat r LEFT JOIN r.controlleur c LEFT JOIN r.lot l '
                    . ' WHERE l.id = :lotid and (r.serie like :search OR c.nom like :search OR c.prenom like :search OR CONCAT(c.nom, :vide, c.prenom) like :search)'
                    . ' ORDER BY '.$sCol.' '.$sdir)
            ->setParameter('lotid', $lotid)
            ->setParameter('search', '%'.$search.'%')
            ->setParameter('vide', ' ')
            ->setFirstResult($start)
            ->setMaxResults($end);
        $arrayAss = $qb->execute(null, \Doctrine\ORM\Query::HYDRATE_SCALAR);
        return $arrayAss;
    }
    
    public function countRows($lotid) {
        $qb = $this->createQueryBuilder('c');
        $qb->select('count(c.id)')->leftJoin('c.lot', 'l')->where('c.id = :lotid')->setParameter('lotid', $lotid);
        return  $qb->getQuery()->getSingleScalarResult();
    }
    
    public function countRowsFiltre($search, $lotid) {
        $qb = $this->createQueryBuilder('r');
        $qb->select('count(r.id)')->leftJoin('r.lot', 'l')->leftJoin('r.controlleur', 'c')->where('l.id = :lotid AND (r.serie like :search OR c.nom like :search )')->setParameter('lotid', $lotid)->setParameter('search', '%'.$search.'%');
        return  $qb->getQuery()->getSingleScalarResult();
    }
    

    public function findAnnuler($idLot) {
        $qb = $this->getEntityManager()
            ->createQuery(
                'SELECT count(r.id) as nb FROM AppBundle:Certificat r LEFT JOIN r.lot m'
                    . ' WHERE m.id = :idLot AND r.annule = true')
            ->setParameter('idLot', $idLot);
        return $qb->getSingleScalarResult();
    }
    
    public function findAttribue($idLot) {
        $qb = $this->getEntityManager()
            ->createQuery(
                'SELECT count(r.id) as nb FROM AppBundle:Certificat r LEFT JOIN r.lot m '
                    . ' WHERE m.id = :idLot AND r.annule = false AND r.controlleur IS NOT null')
            ->setParameter('idLot', $idLot);
        return $qb->getSingleScalarResult();
    }
    
    public function trouverParNumero($numero) {
        try{ 
            $result = $this->getEntityManager()
            ->createQuery(
                'SELECT r FROM AppBundle:Certificat r WHERE r.serie = :numero AND r.annule = false AND r.utilise = false'
            )->setParameter("numero",$numero)
            ->getSingleResult();
       }catch (\Doctrine\ORM\NonUniqueResultException $ex) {
            $result = null;
        }
        catch (\Doctrine\ORM\NoResultException $ex){
            $result = null;
        }
        
        return $result; 
    } 
    
    public function trouverParNumeroAnnee($numero, $annee) {
        try{ 
            $result = $this->getEntityManager()
            ->createQuery(
                'SELECT r FROM AppBundle:Certificat r WHERE r.serie = :numero AND r.annee = :annee AND r.annule = false AND r.utilise = false'
            )->setParameter("numero",$numero)->setParameter("annee",$annee)
            ->getSingleResult();
       }catch (\Doctrine\ORM\NonUniqueResultException $ex) {
            $result = null;
        }
        catch (\Doctrine\ORM\NoResultException $ex){
            $result = null;
        }
        
        return $result; 
    } 
    
     public function recuperer($controleurId) {
        $qb = $this->getEntityManager()
            ->createQuery(
                'SELECT r.serie FROM AppBundle:Certificat r LEFT JOIN r.controlleur c '
                    . ' WHERE c.id = :controleurId AND r.annule = false AND r.utilise = false')
            ->setParameter('controleurId', $controleurId);
        return $qb->getResult();
    }
    
    public function rechercher($lotid, $debut,$fin) {
        $qb = $this->getEntityManager()
            ->createQuery(
                'SELECT r FROM AppBundle:Certificat r LEFT JOIN r.lot c '
                    . ' WHERE c.id = :lotid AND r.dateAttribution >= :debut AND r.dateAttribution <= :fin ')
            ->setParameter('lotid', $lotid)->setParameter('debut', $debut)->setParameter('fin', $fin);
        return $qb->getResult();
    }
    
    public function findAjax($search, $maxRows,$userId) {
         $result = $this->getEntityManager()
            ->createQuery(
                'SELECT r FROM AppBundle:Certificat r LEFT JOIN r.controlleur c WHERE r.annule = false AND r.utilise = false AND r.serie LIKE :numero AND c.id = :userId ORDER BY r.serie'
            )->setParameter("numero","%".$search."%")->setParameter("userId",$userId)
                 ->setMaxResults($maxRows)
            ->getResult();
        return $result; 
    }
    
    public function trouverDernierAnnee($annee) {
        try{ 
            $result = $this->getEntityManager()
            ->createQuery(
                'SELECT r.serie FROM AppBundle:Certificat r WHERE r.annee = :annee ORDER BY r.id DESC'
            )->setParameter("annee",$annee)->setMaxResults(1)
            ->getSingleScalarResult();
       }catch (\Doctrine\ORM\NonUniqueResultException $ex) {
            $result = 0;
        }
        catch (\Doctrine\ORM\NoResultException $ex){
            $result = 0;
        }
        
        return $result; 
    }
    
    public function trouverUtiliseParNumeroAnnee($numero, $annee) {
        try{ 
            $result = $this->getEntityManager()
            ->createQuery(
                'SELECT r FROM AppBundle:Certificat r WHERE r.serie = :numero AND r.annee = :annee AND r.annule = false AND r.utilise = true'
            )->setParameter("numero",$numero)->setParameter("annee",$annee)
            ->getSingleResult();
       }catch (\Doctrine\ORM\NonUniqueResultException $ex) {
            $result = null;
        }
        catch (\Doctrine\ORM\NoResultException $ex){
            $result = null;
        }
        
        return $result; 
    }
    
}

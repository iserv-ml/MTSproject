<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * StatistiqueRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProprietaireRepository extends EntityRepository
{
    
    public function findAllAjax($start, $end, $sCol, $sdir, $search) {
        
        $qb = $this->getEntityManager()
            ->createQuery(
                'SELECT r.id, r.numpiece, r.nom, r.prenom, r.telephone, r.adresse, r.email, r.personneMorale, r.dateCreation FROM AppBundle:Proprietaire r '
                    . ' WHERE r.nom LIKE :search OR r.prenom LIKE :search OR r.telephone LIKE :search OR r.numpiece like :search OR r.id like :search OR CONCAT(r.nom, :vide, r.prenom) LIKE :search OR  r.email LIKE :search '
                    . ' ORDER BY '.$sCol.' '.$sdir)
            ->setParameter('search', '%'.$search.'%')
            ->setParameter('vide', ' ')
            ->setFirstResult($start)
            ->setMaxResults($end);
        $arrayAss = $qb->execute(null, \Doctrine\ORM\Query::HYDRATE_SCALAR);
        return $arrayAss;
       
    }
    
     public function countRows() {
        $qb = $this->createQueryBuilder('c');
        $qb->select('count(c.id)');
        return  $qb->getQuery()->getSingleScalarResult();
     }
     
     public function findAjax($search, $maxRows) {
        
        $maxRows = (intval($maxRows) > 0) ? intval($maxRows) : 10; 
        $qb = $this->createQueryBuilder('c');
	$qb ->select('c.nom, c.prenom, c.telephone, c.email,c.id') 
            ->where('c.nom LIKE :search OR c.prenom LIKE :search OR c.telephone LIKE :search OR  CONCAT(c.prenom, :vide, c.nom) LIKE :search OR CONCAT(c.nom, :vide, c.prenom) LIKE :search')
            ->setParameter('search', '%'.$search.'%')
            ->setParameter('vide', ' ')
            ->setMaxResults($maxRows)
            ->getQuery()->execute();
        $arrayAss = $qb->getQuery()
	->execute(null, \Doctrine\ORM\Query::HYDRATE_SCALAR);
        //print_r($arrayAss);exit;
        return $arrayAss;
    }
    
    
}

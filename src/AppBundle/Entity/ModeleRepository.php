<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ModeleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ModeleRepository extends EntityRepository
{
    
    public function findAllAjax($start, $end, $sCol, $sdir, $search) {
        $qb = $this->getEntityManager()
            ->createQuery(
                'SELECT r.id, r.libelle, r.code, m.libelle as marque FROM AppBundle:Modele r LEFT JOIN r.marque m'
                    . ' WHERE r.libelle like :search or m.libelle like :search'
                    . ' ORDER BY '.$sCol.' '.$sdir)
            ->setParameter('search', '%'.$search.'%')
            ->setFirstResult($start)
            ->setMaxResults($end);
        $arrayAss = $qb->execute(null, \Doctrine\ORM\Query::HYDRATE_SCALAR);
        return $arrayAss;
    }
    
    public function countRows() {
        $qb = $this->createQueryBuilder('c');
        $qb->select('count(c.id)');
        return  $qb->getQuery()->getSingleScalarResult();
    }
    
    public function countRowsFiltre($search) {
        $qb = $this->createQueryBuilder('r');
        $qb->select('count(r.id)')->leftJoin('r.marque', 'm')->where('r.libelle like :search or m.libelle like :search')->setParameter('search', '%'.$search.'%');
        return  $qb->getQuery()->getSingleScalarResult();
    }
    
    public function trouverParLibelle($libelle) {
       try{ 
         $result = $this->getEntityManager()
            ->createQuery(
                'SELECT r FROM AppBundle:Modele r WHERE r.libelle = :libelle'
            )->setParameter("libelle",$libelle)
            ->getSingleResult();
       }catch (\Doctrine\ORM\NonUniqueResultException $ex) {
            $result = null;
        }
        catch (\Doctrine\ORM\NoResultException $ex){
            $result = null;
        }
        
        return $result; 
    }  
    
    public function findAjax($search, $maxRows) {
         $result = $this->getEntityManager()
            ->createQuery(
                'SELECT r.id, r.libelle as modele, m.libelle as marque FROM AppBundle:Modele r LEFT JOIN r.marque m WHERE r.ancienneBase = false AND r.libelle LIKE :libelle OR m.libelle like :libelle order by m.libelle'
            )->setParameter("libelle","%".$search."%")
                 ->setMaxResults($maxRows)
            ->getResult();
         if(count($result)==0)
             $result[] = ["id"=>0, "marque"=>"Aucun rÃ©sultat", "modele"=>""];
        return $result; 
    } 
    public function trouverParModeleMarque($modele, $marque) {
       try{ 
         $result = $this->getEntityManager()
            ->createQuery(
                'SELECT r FROM AppBundle:Modele r LEFT JOIN r.marque m WHERE r.libelle = :modele AND m.libelle = :marque'
            )->setParameter("modele",$modele)->setParameter("marque",$marque)
            ->getSingleResult();
       }catch (\Doctrine\ORM\NonUniqueResultException $ex) {
            $result = null;
        }
        catch (\Doctrine\ORM\NoResultException $ex){
            $result = null;
        }
        
        return $result; 
    } 
}

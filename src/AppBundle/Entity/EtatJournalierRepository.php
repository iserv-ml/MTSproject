<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * EtatJournalierRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EtatJournalierRepository extends EntityRepository
{
    
    public function findAllAjax($start, $end, $sCol, $sdir, $search) {
        $qb = $this->getEntityManager()
            ->createQuery(
                'SELECT r.id, r.ptacMin, r.ptacMax, r.montant, r.timbre, r.anasser, c.libelle as carrosserie, u.libelle as usage, g.libelle as genre FROM AppBundle:DroitVisite r LEFT JOIN r.carrosserie c LEFT JOIN r.usage u LEFT JOIN r.genre g '
                    . ' WHERE r.montant like :search or c.libelle like :search or u.libelle like :search or g.libelle like :search'
                    . ' ORDER BY '.$sCol.' '.$sdir)
            ->setParameter('search', '%'.$search.'%')
            ->setFirstResult($start)
            ->setMaxResults($end);
        $arrayAss = $qb->execute(null, \Doctrine\ORM\Query::HYDRATE_SCALAR);
        return $arrayAss;
    }
    
    public function etatJournalier($usage, $debut, $fin, $caisse) {
        $qb = $this->getEntityManager()
            ->createQuery(
                'SELECT r.typeVehicule, SUM(r.nbvisite), SUM(r.nbrevisite), SUM(r.montantVisite), SUM(r.montantRevisite), SUM(r.anaser) FROM AppBundle:EtatJournalier r '
                    . ' WHERE r.typeVehicule = :usage AND r.dateCreation >= :debut AND r.dateCreation <= :fin AND r.caisse = :caisse GROUP BY r.typeVehicule ')
            ->setParameter('usage', $usage)->setParameter('debut', $debut)->setParameter('fin', $fin)->setParameter('caisse', $caisse);
        $arrayAss = $qb->execute(null, \Doctrine\ORM\Query::HYDRATE_SCALAR);
        return $arrayAss;
    }
    
    public function recupererTypeVehiculeDistinct($debut, $fin, $caisse) {
        $qb = $this->getEntityManager()
            ->createQuery('SELECT DISTINCT r.typeVehicule FROM AppBundle:EtatJournalier r WHERE r.dateCreation >= :debut AND r.dateCreation <= :fin AND r.caisse = :caisse')->setParameter('debut', $debut)->setParameter('fin', $fin)->setParameter('caisse', $caisse);
        $arrayAss = $qb->execute(null, \Doctrine\ORM\Query::HYDRATE_SCALAR);
        return $arrayAss;
    }
    
     public function countRows() {
        $qb = $this->createQueryBuilder('c');
        $qb->select('count(c.id)');
        return  $qb->getQuery()->getSingleScalarResult();
     }
    
     public function trouverParLibelle($libelle) {
       try{ 
         $result = $this->getEntityManager()
            ->createQuery(
                'SELECT r FROM AppBundle:Modele r WHERE r.libelle = :libelle'
            )->setParameter("libelle",$libelle)
            ->getSingleResult();
       }catch (\Doctrine\ORM\NonUniqueResultException $ex) {
            $result = null;
        }
        catch (\Doctrine\ORM\NoResultException $ex){
            $result = null;
        }
        
        return $result; 
    }  
    
    public function trouverParImmatriculation($immatriculation) {
        try{ 
            $result = $this->getEntityManager()
                ->createQuery(
                    'SELECT r FROM AppBundle:EtatJournalier r WHERE r.immatriculation = :immatriculation '
                )->setParameter("immatriculation",$immatriculation)
                ->getResult();
       }catch (\Exception $ex) {
            $result = null;
        }
        return $result; 
    }
    
    public function recupererEtatJournalier($debut, $fin, $caisse, $agent) {
        $qb = $this->getEntityManager()
            ->createQuery('SELECT DISTINCT r.typeVehicule FROM AppBundle:EtatJournalier r WHERE r.dateCreation >= :debut AND r.dateCreation <= :fin AND r.caisse = :caisse AND r.creePar = :creePar')->setParameter('debut', $debut)->setParameter('fin', $fin)->setParameter('caisse', $caisse)->setParameter('creePar', $agent);
        $arrayAss = $qb->execute(null, \Doctrine\ORM\Query::HYDRATE_SCALAR);
        return $arrayAss;
    }
    
    public function etatJournalierAgent($usage, $debut, $fin, $caisse, $agent) {
        $qb = $this->getEntityManager()
            ->createQuery(
                'SELECT r.typeVehicule, SUM(r.nbvisite), SUM(r.nbrevisite), SUM(r.montantVisite), SUM(r.montantRevisite), SUM(r.anaser) FROM AppBundle:EtatJournalier r '
                    . ' WHERE r.typeVehicule = :usage AND r.dateCreation >= :debut AND r.dateCreation <= :fin AND r.caisse = :caisse AND r.encaissePar =:agent GROUP BY r.typeVehicule ')
            ->setParameter('usage', $usage)->setParameter('debut', $debut)->setParameter('fin', $fin)->setParameter('caisse', $caisse)->setParameter('agent', $agent);
        $arrayAss = $qb->execute(null, \Doctrine\ORM\Query::HYDRATE_SCALAR);
        return $arrayAss;
    }
    
    public function recupererTypeEncaisse($numero){
        try{ 
            $result = $this->getEntityManager()
                ->createQuery(
                    'SELECT r FROM AppBundle:EtatJournalier r WHERE r.quittance = :numero'
                )->setParameter("numero",$numero)
                ->getSingleResult();
        }catch (\Doctrine\ORM\NonUniqueResultException $ex) {
            $result = null;
        }
        catch (\Doctrine\ORM\NoResultException $ex){
            $result = null;
        }
        
        return $result;
    }
}

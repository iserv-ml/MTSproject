<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * AffectationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AffectationRepository extends EntityRepository
{
    
    public function findAllAjax($start, $end, $sCol, $sdir, $search) {
        $qb = $this->getEntityManager()
            ->createQuery(
                'SELECT r.id, r.actif, r.date, a.username, c.numero FROM AppBundle:Affectation r LEFT JOIN r.agent a LEFT JOIN r.caisse c '
                    . ' WHERE r.actif = 1 AND (a.username like :search or c.numero like :search) '
                    . ' ORDER BY '.$sCol.' '.$sdir)
            ->setParameter('search', '%'.$search.'%')
            ->setFirstResult($start)
            ->setMaxResults($end);
        $arrayAss = $qb->execute(null, \Doctrine\ORM\Query::HYDRATE_SCALAR);
        return $arrayAss;
    }
    
     public function countRows() {
        $qb = $this->createQueryBuilder('c');
        $qb->select('count(c.id)');
        return  $qb->getQuery()->getSingleScalarResult();
     }
     
     public function countRowsFiltre($search) {
        $qb = $this->createQueryBuilder('r');
        $qb->select('count(r.id)')->leftJoin('r.agent', 'a')->leftJoin('r.caisse', 'c')->where('r.actif = 1 AND (a.username like :search or c.numero like :search)')->setParameter('search', '%'.$search.'%');
        return  $qb->getQuery()->getSingleScalarResult();
    }
    
    public function trouverParLibelle($libelle) {
       try{ 
         $result = $this->getEntityManager()
            ->createQuery(
                'SELECT r FROM AppBundle:Caisse r WHERE r.numero = :libelle'
            )->setParameter("libelle",$libelle)
            ->getSingleResult();
       }catch (\Doctrine\ORM\NonUniqueResultException $ex) {
            $result = null;
        }
        catch (\Doctrine\ORM\NoResultException $ex){
            $result = null;
        }
        
        return $result; 
    } 
    
    public function derniereAffectation($userid) {
       try{ 
         $result = $this->getEntityManager()
            ->createQuery(
                'SELECT r FROM AppBundle:Affectation r LEFT JOIN r.agent u WHERE u.id = :userid AND r.actif = 1'
            )->setParameter("userid",$userid)
            ->getSingleResult();
       }catch (\Doctrine\ORM\NonUniqueResultException $ex) {
            $result = -1;
        }
        catch (\Doctrine\ORM\NoResultException $ex){
            $result = null;
        }
        
        return $result; 
    } 
    
    public function derniereAffectationCaisse($caisse) {
       try{ 
         $result = $this->getEntityManager()
            ->createQuery(
                'SELECT r FROM AppBundle:Affectation r LEFT JOIN r.caisse c WHERE c.id = :caisseid AND r.actif = 1'
            )->setParameter("caisseid",$caisse)
            ->getSingleResult();
       }catch (\Doctrine\ORM\NonUniqueResultException $ex) {
            $result = -1;
        }
        catch (\Doctrine\ORM\NoResultException $ex){
            $result = null;
        }
        
        return $result; 
    }
    
    public function touteAffectationCaisse($caisse, $jour) {
       try{ 
         $result = $this->getEntityManager()
            ->createQuery(
                'SELECT r FROM AppBundle:Affectation r LEFT JOIN r.caisse c WHERE c.id = :caisseid AND r.date =: jour'
            )->setParameter("caisseid",$caisse)->setParameter("jour",$jour)
            ->getResult();
       }
        catch (\Exception $ex){
            $result = null;
        }
        
        return $result; 
    }
    
    public function trouverParNumeroCaisse($numero) {
        try{ 
            $result = $this->getEntityManager()
            ->createQuery(
                'SELECT r FROM AppBundle:Affectation r LEFT JOIN r.caisse c WHERE c.numero = :numero'
            )->setParameter("numero",$numero)
            ->getResult();
        }
        catch (\Execption $ex){
            $result = null;
        } 
        return $result; 
    }
    
    public function trouverParNumeroCaisseDate($numero, $date) {
        try{ 
            $result = $this->getEntityManager()
            ->createQuery(
                'SELECT r FROM AppBundle:Affectation r LEFT JOIN r.caisse c WHERE c.numero = :numero AND (r.actif = :true OR r.dateModification >= :date)'
            )->setParameter("numero",$numero)->setParameter("date",$date)->setParameter("true",true)
            ->getResult();
        }
        catch (\Execption $ex){
            $result = null;
        } 
        return $result; 
    }
}

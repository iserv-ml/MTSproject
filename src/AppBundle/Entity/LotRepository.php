<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * LotRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LotRepository extends EntityRepository
{
    
    public function findAllAjax($start, $end, $sCol, $sdir, $search) {
        $qb = $this->getEntityManager()
            ->createQuery(
                'SELECT r.id, r.numero, r.actif, r.ouvert FROM AppBundle:Caisse r '
                    . ' WHERE r.numero like :search'
                    . ' ORDER BY '.$sCol.' '.$sdir)
            ->setParameter('search', '%'.$search.'%')
            ->setFirstResult($start)
            ->setMaxResults($end);
        $arrayAss = $qb->execute(null, \Doctrine\ORM\Query::HYDRATE_SCALAR);
        return $arrayAss;
    }
    
    public function findAllCentreAjax($start, $end, $sCol, $sdir, $search) {
        $qb = $this->getEntityManager()
            ->createQuery(
                'SELECT r.id, r.serie, r.annee, r.quantite, m.nom, m.prenom, r.controlleur, r.dateAffectationCentre, r.attributeur FROM AppBundle:Lot r LEFT JOIN r.chefCentre m'
                    . ' WHERE r.serie like :search'
                    . ' ORDER BY '.$sCol.' '.$sdir)
            ->setParameter('search', '%'.$search.'%')
            ->setFirstResult($start)
            ->setMaxResults($end);
        $arrayAss = $qb->execute(null, \Doctrine\ORM\Query::HYDRATE_SCALAR);
        return $arrayAss;
    }
    
    public function countRows($idAgent) {
        $qb = $this->createQueryBuilder('c');
        $qb->select('count(c.id)')->leftJoin('c.chefCentre', 'v')->where('v.id = :idAgent')->setParameter('idAgent', $idAgent);
        return  $qb->getQuery()->getSingleScalarResult();
    }
    
    public function countRowsFiltre($search, $idAgent) {
        $qb = $this->createQueryBuilder('r');
        $qb->select('count(r.id)')->leftJoin('r.chefCentre', 'v')->where('r.serie like :search')->andWhere('v.id = :idAgent')->setParameter('search', '%'.$search.'%')->setParameter('idAgent', $idAgent);
        return  $qb->getQuery()->getSingleScalarResult();
    }
    
     public function trouverParLibelle($libelle) {
       try{ 
         $result = $this->getEntityManager()
            ->createQuery(
                'SELECT r FROM AppBundle:Caisse r WHERE r.numero = :libelle'
            )->setParameter("libelle",$libelle)
            ->getSingleResult();
       }catch (\Doctrine\ORM\NonUniqueResultException $ex) {
            $result = null;
        }
        catch (\Doctrine\ORM\NoResultException $ex){
            $result = null;
        }
        
        return $result; 
    } 
    
    public function trouverPourEtat($start, $end, $sCol, $sdir, $search) {
        $qb = $this->getEntityManager()
            ->createQuery(
                'SELECT r FROM AppBundle:Caisse r '
                    . ' WHERE r.numero like :search'
                    . ' ORDER BY '.$sCol.' '.$sdir)
            ->setParameter('search', '%'.$search.'%')
            ->setFirstResult($start)
            ->setMaxResults($end);
        $arrayAss = $qb->getResult();
        return $arrayAss;
    }
    
    public function rechercher($debut,$fin) {
        $qb = $this->getEntityManager()
            ->createQuery(
                'SELECT r.id, r.serie, r.quantite, r.dateAffectationCentre, r.attributeur FROM AppBundle:Lot r '
                    . ' WHERE r.dateAffectationCentre >= :debut AND r.dateAffectationCentre <= :fin ')
            ->setParameter('debut', $debut)->setParameter('fin', $fin);
        return $qb->execute(null, \Doctrine\ORM\Query::HYDRATE_SCALAR);
    }
    
    public function nonEpuise() {
        $qb = $this->getEntityManager()
            ->createQuery(
                'SELECT r.id, r.serie, r.annee, r.quantite, r.dateAffectationCentre, r.attributeur FROM AppBundle:Lot r '
                    . ' WHERE r.epuise IS NULL OR r.epuise = :epuise ')->setParameter("epuise", false)
            ;
        return $qb->execute(null, \Doctrine\ORM\Query::HYDRATE_SCALAR);
    }
}
